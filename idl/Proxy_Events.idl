/* -*- C++ -*-
 * Copyright (C) 2009 Trinity Core <http://www.trinitycore.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/**
 *  @file
 *  @brief   Interface Definition for structures used when communicating between Realm and Game nodes.
 *  @author  raczman <raczman@gmail.cm>
 *  @date    2009-11-11
 *
 */

module Trinity
{
  
  /**
   * @brief Proxy nodes sends that when announcing 
   *        their presence, either requested or not.
   */
  struct Proxy_Announce
  {
    /**
     * @brief ID of realm zone works on.
     */
    unsigned short realm_id;
    
    /**
     * @brief Address of proxy node, in ip:port form.
     */
    string address;
  };

  /**
   * @brief Load report sent by Proxy nodes to login server(s)
   */
  struct Proxy_Load_Report
  {
    /**
     * @see Trinity::Proxy_Announce
     */
    string address;
    
    /**
     * @brief Load is reported by current 
     *        connections divided by max connections.
     */
    float load;
  };

  /**
   * @brief Realm node sends that
   *        to request Proxy_Announce s
   * @details It is here to preserve crash resilience.
   */
  struct Proxy_Request
  {
    unsigned short realm_id;
  };

};
